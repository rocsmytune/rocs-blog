(window.webpackJsonp=window.webpackJsonp||[]).push([[16],{407:function(t,r,a){"use strict";a.r(r);var e=a(2),s=Object(e.a)({},(function(){var t=this,r=t._self._c;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("h1",{attrs:{id:"八股文"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#八股文"}},[t._v("#")]),t._v(" 八股文")]),t._v(" "),r("h3",{attrs:{id:"基础知识"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#基础知识"}},[t._v("#")]),t._v(" 基础知识")]),t._v(" "),r("h4",{attrs:{id:"面向对象编程三大特性"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#面向对象编程三大特性"}},[t._v("#")]),t._v(" 面向对象编程三大特性")]),t._v(" "),r("ul",[r("li",[r("p",[t._v("封装")])]),t._v(" "),r("li",[r("p",[t._v("继承")]),t._v(" "),r("p",[r("code",[t._v("protected")]),t._v("关键字: 对于protected而言，它指明就类用户而言，是private，但是对于任何继承与此类的子类而言或者其他任何位于同一个包的类而言，却是可以访问的。")])]),t._v(" "),r("li",[r("p",[t._v("多态")])])]),t._v(" "),r("h4",{attrs:{id:"线程和进程"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#线程和进程"}},[t._v("#")]),t._v(" 线程和进程")]),t._v(" "),r("p",[r("strong",[t._v("进程是资源分配的最小单位，线程是程序执行的最小单位")])]),t._v(" "),r("h5",{attrs:{id:"解决线程安全"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#解决线程安全"}},[t._v("#")]),t._v(" 解决线程安全")]),t._v(" "),r("h4",{attrs:{id:"设计模式"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#设计模式"}},[t._v("#")]),t._v(" 设计模式")]),t._v(" "),r("h3",{attrs:{id:"linux"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#linux"}},[t._v("#")]),t._v(" Linux")]),t._v(" "),r("h4",{attrs:{id:"shell"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#shell"}},[t._v("#")]),t._v(" shell")]),t._v(" "),r("p",[t._v("获取input，根据input执行，display output；")]),t._v(" "),r("p",[t._v("运行 commands, programs, scripts;")]),t._v(" "),r("ul",[r("li",[t._v("原理：user enter in, system create a new process: "),r("code",[t._v("bash")]),t._v(":"),r("em",[t._v("command line interpreter")]),t._v(", Linux系统像是一个Kernel，我们需要使用它时，bash通过读取我们的命令穿过shell（外壳）与kernel交流，why not directlt：not good at it")])]),t._v(" "),r("h3",{attrs:{id:"计算机网络"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#计算机网络"}},[t._v("#")]),t._v(" 计算机网络")]),t._v(" "),r("h4",{attrs:{id:"the-open-systems-interconnection-osi-model"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#the-open-systems-interconnection-osi-model"}},[t._v("#")]),t._v(" The Open Systems Interconnection (OSI) model")]),t._v(" "),r("ul",[r("li",[t._v("五层模型 ：![image-20220714155746676](/Users/rocs/Library/Application Support/typora-user-images/image-20220714155746676.png)")])]),t._v(" "),r("p",[t._v("application(application(人机交互), presentation（数据交互）, session（链接维护）), 应用进程服务")]),t._v(" "),r("p",[t._v("transport,  transmision protocol like TCP/UDP 主机间进程通信服务")]),t._v(" "),r("p",[t._v("network, 决定physical path the data will take 主机通信服务，数据传输路径寻找 eg：子网划分，vpn，nat")]),t._v(" "),r("p",[t._v("data link, 定义 format of network data 数据转化为帧，eg：差错检测")]),t._v(" "),r("p",[t._v("physical, transmit raw bit stream over the physcial medium 物理媒介保障")]),t._v(" "),r("ul",[r("li",[r("p",[t._v("TCP详解：")]),t._v(" "),r("p",[t._v("六个控制位：URG（紧急）， ACK（确认），PSH（推送），RST（复位），SYN（同步），FIN（终止）")]),t._v(" "),r("p",[r("strong",[t._v("三次握手")]),t._v("：建立连接")]),t._v(" "),r("p",[t._v("A->B: SYN(位) 1，seq（号） x;")]),t._v(" "),r("p",[t._v("A<-B: SYN 1, ACK 1, seq y, ack x+1;")]),t._v(" "),r("p",[t._v("A->B: ACK 1,seq x+1, ack y+1")]),t._v(" "),r("p",[r("strong",[t._v("四次挥手")]),t._v("：释放连接")]),t._v(" "),r("p",[t._v("A->B: FIN 1，seq  u;")]),t._v(" "),r("p",[t._v("A<-B: ACK 1, seq v, ack u+1;")]),t._v(" "),r("p",[t._v("A<-B: FIN 1, ACK 1, seq w, ack v+1;")]),t._v(" "),r("p",[t._v("A->B:ACK 1, seq u+1, ack w+1. 2msl A 经过 2 倍的 MSL（Maximum Segment Lifetime，最长报文段寿命）后，才进入 CLOSED 状态")])])]),t._v(" "),r("h4",{attrs:{id:"dhcp"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#dhcp"}},[t._v("#")]),t._v(" DHCP")]),t._v(" "),r("p",[r("strong",[t._v("动态主机设置协议")]),t._v(" "),r("strong",[t._v("D")]),t._v("ynamic "),r("strong",[t._v("H")]),t._v("ost "),r("strong",[t._v("C")]),t._v("onfiguration "),r("strong",[t._v("P")]),t._v("rotocol")]),t._v(" "),r("p",[t._v("是一个用于"),r("a",{attrs:{href:"https://zh.wikipedia.org/wiki/%E7%BD%91%E9%99%85%E5%8D%8F%E8%AE%AE",target:"_blank",rel:"noopener noreferrer"}},[t._v("IP"),r("OutboundLink")],1),t._v("网络的"),r("a",{attrs:{href:"https://zh.wikipedia.org/wiki/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE",target:"_blank",rel:"noopener noreferrer"}},[t._v("网络协议"),r("OutboundLink")],1),t._v("，位于"),r("a",{attrs:{href:"https://zh.wikipedia.org/wiki/OSI%E6%A8%A1%E5%9E%8B",target:"_blank",rel:"noopener noreferrer"}},[t._v("OSI模型"),r("OutboundLink")],1),t._v("的"),r("a",{attrs:{href:"https://zh.wikipedia.org/wiki/%E5%BA%94%E7%94%A8%E5%B1%82",target:"_blank",rel:"noopener noreferrer"}},[t._v("应用层"),r("OutboundLink")],1),t._v("，使用"),r("a",{attrs:{href:"https://zh.wikipedia.org/wiki/%E7%94%A8%E6%88%B7%E6%95%B0%E6%8D%AE%E6%8A%A5%E5%8D%8F%E8%AE%AE",target:"_blank",rel:"noopener noreferrer"}},[t._v("UDP"),r("OutboundLink")],1),t._v("协议工作，主要有两个用途：")]),t._v(" "),r("ul",[r("li",[t._v("用于内部网或网络服务供应商自动分配"),r("a",{attrs:{href:"https://zh.wikipedia.org/wiki/IP%E5%9C%B0%E5%9D%80",target:"_blank",rel:"noopener noreferrer"}},[t._v("IP地址"),r("OutboundLink")],1),t._v("给用户")]),t._v(" "),r("li",[t._v("用于内部网管理员对所有电脑作中央管理")])]),t._v(" "),r("h3",{attrs:{id:"git"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#git"}},[t._v("#")]),t._v(" Git")]),t._v(" "),r("ul",[r("li",[r("p",[t._v("初始化/删除："),r("code",[t._v("git init")]),t._v(" "),r("code",[t._v("ls -a; rm -rf .git")])])]),t._v(" "),r("li",[r("p",[t._v("本地新建推送到线上：https://zhuanlan.zhihu.com/p/34625448")]),t._v(" "),r("p",[r("code",[t._v("git remote add origin <url>;")])]),t._v(" "),r("p",[r("code",[t._v("git pull origin master;")])]),t._v(" "),r("p",[r("code",[t._v("git push -u origin master")])])]),t._v(" "),r("li",[r("p",[t._v("stash. "),r("code",[t._v("git stash; git stash show/list/pop")]),t._v(" 暂存修改，回到上一次干净的提交 https://blog.csdn.net/daguanjia11/article/details/73810577")])]),t._v(" "),r("li",[r("p",[t._v("Reset "),r("code",[t._v("git reset --soft HEAD^/HEAD~`/HEAD~2")])])])]),t._v(" "),r("h3",{attrs:{id:"java"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#java"}},[t._v("#")]),t._v(" Java")]),t._v(" "),r("h4",{attrs:{id:"数据结构"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#数据结构"}},[t._v("#")]),t._v(" 数据结构")]),t._v(" "),r("h5",{attrs:{id:"双端队列-deque"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#双端队列-deque"}},[t._v("#")]),t._v(" "),r("strong",[t._v("双端队列 Deque")])]),t._v(" "),r("ul",[r("li",[r("p",[t._v("一种具有队列和栈的性质的数据结构。https://juejin.cn/post/7049628663439949837\nAPI: "),r("code",[t._v("interface Deque<E> extends Queue<E>")])])]),t._v(" "),r("li",[r("p",[t._v("两种实现类的"),r("strong",[t._v("使用场景")]),t._v("\nArrayDeque:频繁的随机访问操作。\nLinkedList:频繁的插入，删除操作以及未知的初始数据量。")])])]),t._v(" "),r("h5",{attrs:{id:"string"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#string"}},[t._v("#")]),t._v(" "),r("strong",[t._v("String")])]),t._v(" "),r("ul",[r("li",[t._v("String是Java里的一个类，并不是基本数据类型；由于String类是final的，所以它不可继承，不可修改。")])]),t._v(" "),r("h5",{attrs:{id:"string-stringbuffer-stringbuilder"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#string-stringbuffer-stringbuilder"}},[t._v("#")]),t._v(" "),r("strong",[t._v("String StringBuffer StringBuilder")])]),t._v(" "),r("ul",[r("li",[t._v("（1）基本原则：如果要操作少量的数据，用String ；单线程操作大量数据，用StringBuilder ；多线程操作大量数据，用StringBuffer。")]),t._v(" "),r("li",[t._v('（2）不要使用String类的"+"来进行频繁的拼接，因为那样的性能极差的，应该使用StringBuffer或StringBuilder类，这在Java的优化上是一条比较重要的原则。')])]),t._v(" "),r("h5",{attrs:{id:"switch"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#switch"}},[t._v("#")]),t._v(" "),r("strong",[t._v("switch")])]),t._v(" "),r("ul",[r("li",[t._v("switch支持四种整型和他们对应的包装数据（Integer...）以及枚举Enum、String类型")])]),t._v(" "),r("h5",{attrs:{id:"and"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#and"}},[t._v("#")]),t._v(" "),r("strong",[t._v("&")]),t._v(" and "),r("strong",[t._v("&&")]),t._v("：")]),t._v(" "),r("ul",[r("li",[t._v("前者两边都运算再比较判断，后者是先运算前面，若前面为true才运算后面")])]),t._v(" "),r("h4",{attrs:{id:"常用方法"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#常用方法"}},[t._v("#")]),t._v(" 常用方法")]),t._v(" "),r("ul",[r("li",[r("p",[t._v("Java "),r("strong",[t._v("比较器")]),t._v(" Comparable 与 Comparator")]),t._v(" "),r("p",[t._v("Comparable只能在实体类内部实现，使得该实体类获得比较的方法；")]),t._v(" "),r("p",[t._v("Comparator可以在外部针对实体类实现，不仅该实体类，其他类也可以在需要时使用该比较器；")]),t._v(" "),r("p",[t._v("https://www.jianshu.com/p/323d120c6dae")])])]),t._v(" "),r("h4",{attrs:{id:"jvm"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#jvm"}},[t._v("#")]),t._v(" JVM")]),t._v(" "),r("h5",{attrs:{id:"class加载"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#class加载"}},[t._v("#")]),t._v(" class加载")]),t._v(" "),r("ul",[r("li",[r("p",[t._v("loading")]),t._v(" "),r("p",[t._v("先通过类加载器加载"),r("code",[t._v(".class")]),t._v("文件到jvm内存中。采用"),r("strong",[t._v("双亲委派机制")])]),t._v(" "),r("p",[t._v("自底向上检查该类是否已经加载，parent方向；")]),t._v(" "),r("p",[t._v("自顶向下进行类的实际查找和加载，child方向。")]),t._v(" "),r("p",[t._v("类的加载遵循双亲委派机制，主要是出于安全的考虑。")])]),t._v(" "),r("li",[r("p",[t._v("linking")]),t._v(" "),r("p",[t._v("Verification Preparation Resolution")]),t._v(" "),r("ul",[r("li",[t._v("Vertification： 验证Class文件是否符合JVM规定。")]),t._v(" "),r("li",[t._v("Preparation：给静态成员变量赋默认值")]),t._v(" "),r("li",[t._v("Resolution：将类、方法、属性等符号引用解释为直接引用；常量池中的各种符号引用解释为指针、偏移量等内存地址的直接引用")])])]),t._v(" "),r("li",[r("p",[t._v("Initializing")]),t._v(" "),r("p",[t._v("调用初始化代码clint,给静态成员变量赋初始值。")])])]),t._v(" "),r("h5",{attrs:{id:"运行时数据区分类-https-blog-csdn-net-zhangqilugrubby-article-details-59110906"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#运行时数据区分类-https-blog-csdn-net-zhangqilugrubby-article-details-59110906"}},[t._v("#")]),t._v(" 运行时数据区分类 https://blog.csdn.net/zhangqiluGrubby/article/details/59110906")]),t._v(" "),r("ul",[r("li",[t._v("jvm stack "),r("strong",[t._v("栈")]),t._v(" ：每个线程包含一个栈区,栈中只保存基础数据类型的对象和自定义对象的引用(不是对象)。")]),t._v(" "),r("li",[t._v("heap memory "),r("strong",[t._v("堆内存")]),t._v("：堆数据区是用来存放对象和数组（特殊的对象）。堆内存由多个线程共享。堆内存随着JVM启动而创建。")]),t._v(" "),r("li",[t._v("method area "),r("strong",[t._v("方法区")]),t._v("：与堆一样，是被线程共享的区域。在方法区中，存储了每个类的信息（包括类的名称、方法信息、字段信息）、静态变量、常量以及编译器编译后的代码等。")]),t._v(" "),r("li",[t._v("native method stack "),r("strong",[t._v("本地方法栈")]),t._v("：使用非Java语言实现的方法——支持native方法调用的JVM实现")]),t._v(" "),r("li",[t._v("program counter register "),r("strong",[t._v("程序计数器")]),t._v("：用来记录当前线程中正在执行的指令。如果当前正在执行的方法是本地方法，那么此刻程序计数器的值为undefined。注意这个区域是"),r("strong",[t._v("唯一一个")]),t._v("不抛出OutOfMemoryError的运行时数据区。")])]),t._v(" "),r("h4",{attrs:{id:"spring"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#spring"}},[t._v("#")]),t._v(" Spring")]),t._v(" "),r("h5",{attrs:{id:"注解"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#注解"}},[t._v("#")]),t._v(" 注解")]),t._v(" "),r("ul",[r("li",[r("p",[r("strong",[t._v("@RestController")]),t._v("和**@Controller**：https://www.cnblogs.com/east7/p/10462279.html")]),t._v(" "),r("p",[t._v("都用来表示Spring某个类是否可以接收HTTP请求；")]),t._v(" "),r("p",[r("em",[t._v("@RestController注解等价于@ResponseBody ＋ @Controller")]),t._v("，"),r("strong",[t._v("二者区别： @RestController无法返回指定页面，而@Controller可以")]),t._v("；前者可以直接返回数据，后者需要@ResponseBody辅助")])]),t._v(" "),r("li",[r("p",[r("strong",[t._v("RESTful架构")]),t._v("是对MVC架构改进后所形成的一种架构，通过使用事先定义好的接口与不同的服务联系起来。 在RESTful架构中，浏览器使用"),r("strong",[t._v("POST，DELETE，PUT和GET")]),t._v("四种请求方式分别对指定的URL资源进行增删改查操作。 因此，"),r("strong",[t._v("RESTful是通过URI实现对资源的管理及访问，具有扩展性强、结构清晰的特点")]),t._v("。")])])]),t._v(" "),r("h5",{attrs:{id:"spring-cache"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#spring-cache"}},[t._v("#")]),t._v(" Spring Cache")]),t._v(" "),r("p",[t._v("通过注入特定的cache依赖，从来借助注解来实现自动化的cache管理 "),r("strong",[t._v("EnableCaching")])]),t._v(" "),r("p",[r("strong",[t._v("@CachePut @CacheEvict")])]),t._v(" "),r("p",[r("strong",[t._v("@Cacheable")]),t._v(" 🎉")]),t._v(" "),r("h3",{attrs:{id:"mysql"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#mysql"}},[t._v("#")]),t._v(" MySQL")]),t._v(" "),r("h4",{attrs:{id:"乐观锁和悲观锁"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#乐观锁和悲观锁"}},[t._v("#")]),t._v(" 乐观锁和悲观锁")]),t._v(" "),r("h4",{attrs:{id:"索引-index"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#索引-index"}},[t._v("#")]),t._v(" 索引（index）")]),t._v(" "),r("ul",[r("li",[r("p",[t._v("索引帮助MySQL提高检索的速度，但是过多的索引会造成滥用，降低表的更新速度。")])]),t._v(" "),r("li",[r("p",[t._v("分为"),r("strong",[t._v("聚簇索引")]),t._v("和"),r("strong",[t._v("非聚簇索引")]),t._v("。")])])]),t._v(" "),r("h3",{attrs:{id:"redis"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#redis"}},[t._v("#")]),t._v(" Redis")]),t._v(" "),r("p",[t._v("非关系型数据库，主要应用场景：缓存、消息队列、任务队列、分布式锁")]),t._v(" "),r("p",[t._v("在使用redis缓存数据时，需要保证redis数据和数据库数据的一致性，如果数据库发生改变，需要清空现有的缓存（脏数据）")]),t._v(" "),r("h4",{attrs:{id:"常见5种value类型"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#常见5种value类型"}},[t._v("#")]),t._v(" 常见5种value类型")]),t._v(" "),r("ul",[r("li",[r("strong",[t._v("String")]),t._v(" 一般数据类型")]),t._v(" "),r("li",[r("strong",[t._v("List")]),t._v(" 按照插入顺序排序，可以存在重复元素，用作"),r("strong",[t._v("任务队列")]),t._v("，按照顺序排序，先进先处理")]),t._v(" "),r("li",[r("strong",[t._v("Hash")]),t._v(" 适合存储对象数据，映射表")]),t._v(" "),r("li",[r("strong",[t._v("Set")]),t._v(" 无序的，不允许重复元素")]),t._v(" "),r("li",[r("strong",[t._v("Sorted Set")]),t._v(" 独特的"),r("code",[t._v("score")]),t._v("元素 用于排序，有序且无重复，常用于排行榜")])]),t._v(" "),r("h4",{attrs:{id:"操作redis"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#操作redis"}},[t._v("#")]),t._v(" 操作Redis")]),t._v(" "),r("ul",[r("li",[r("p",[t._v("string操作：set get setex setnx")])]),t._v(" "),r("li",[r("p",[t._v("hash操作：hset hget hvals hkeys hgetall")])]),t._v(" "),r("li",[r("p",[t._v("list列表操作：lpush lrange rpop llen brpop  (双端队列)")])]),t._v(" "),r("li",[r("p",[t._v("set集合操作：sadd smembers card sinter sunion stiff srem")])]),t._v(" "),r("li",[r("p",[t._v("sorted set集合 zadd zrange zincrby zrem")])]),t._v(" "),r("li",[r("p",[r("strong",[t._v("通用")]),t._v("： keys "),r("em",[t._v("pattern")]),t._v("  exists type til del")])])])])}),[],!1,null,null,null);r.default=s.exports}}]);